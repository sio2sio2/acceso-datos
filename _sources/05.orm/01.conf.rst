.. _orm-conf:

Configuración
=============
El primer paso es saber cómo configurar nuestro proyecto para poder usar la
especificación |JPA|. Necesitamos dos cosas:

a. Importar librerías.
#. Crear una configuración.

Depedencias
-----------

.. code-block:: xml

   <properties>
       <maven.compiler.release>21</maven.compiler.release>
       <hibernate.version>7.1.0.Final</hibernate.version>
   </properties>

   <!-- ... -->

   <dependencies>
         <!-- Driver JDBC para SQLite -->
         <dependency>
             <groupId>org.xerial</groupId>
             <artifactId>sqlite-jdbc</artifactId>
             <version>3.50.3.0</version>
         </dependency>

         <!-- JPA -->
         <dependency>
             <groupId>jakarta.persistence</groupId>
             <artifactId>jakarta.persistence-api</artifactId>
             <version>3.2.0</version>
         </dependency>

         <!-- Hibernate (Implementación de JPA) -->
         <dependency>
             <groupId>org.hibernate</groupId>
             <artifactId>hibernate-core</artifactId>
             <version>${hibernate.version}</version>
         </dependency>

         <!-- Soporte en Hibernate para SQLite -->
         <dependency>
             <groupId>org.hibernate.orm</groupId>
             <artifactId>hibernate-community-dialects</artifactId>
             <version>${hibernate.version}</version>
         </dependency>

         <!-- Opcional para anotaciones de comprobación -->
         <dependency>
             <groupId>jakarta.validation</groupId>
             <artifactId>jakarta.validation-api</artifactId>
             <version>3.1.1</version>
         </dependency>

        <!-- Opcional para que Hibernate implemente las anotaciones de comprobación -->
        <dependency>
            <groupId>org.hibernate.validator</groupId>
            <artifactId>hibernate-validator</artifactId>
            <version>9.0.1.Final</version>
        </dependency>

        <!-- Opcional para Expression Language (necesario para Hibernate Validator) -->
        <dependency>
           <groupId>org.glassfish</groupId>
           <artifactId>jakarta.el</artifactId>
           <version>4.0.2</version>
        </dependency>
   </dependencies>

En resumidas cuentas es:

* El driver |JDBC| para soportar el |SGBD| que nos interese (para SQLite_ 
  es sqlite-jdbc_).
* El soporte para |JPA| proporcionado por `jakarta.persistence-api`_.
* El soporte para Hibernate_. En el caso particular de SQLite,
  hibernate-core_ no soporta de serie SQLite_, por lo que se debe añadir
  uan librería más (`hibernate-community-dialects`).
* En principio, basta con lo anterior, pero si se quiere llevar a cabo
  comprobaciones sobre los valores de los datos (p.ej. las :ref:`referidas más
  adelante <orm-mapping-check>`), serán necesaria la especificación sita en
  `jakarta.validation-api`_, su implementación en hibernate-validator_ y
  `jakarta.el-api`_, que es necesaria para dicha implementación.

Configuración de la persistencia
--------------------------------
Debe escribirse en el archivo :file:`resources/META-INF/persistence.xml`:

.. literalinclude:: files/persistence.xml
   :language: xml

En este archivo:

* Debemos recordar el nombre que le damos a la unidad de persistencia, porque
  la usaremos luego; y hay propiedades cuyos valores dependen del |ORM| y el
  |SGBD| utilizados.

* El proveedor indica cuál es la implementación |JPA| que usaremos. Algunos
  muy usandos son:

  .. table::
     :class: url-sql

     ============= =======================================================
      Proveedor
     ============= =======================================================
      Hibernate     org.hibernate.jpa.HibernatePersistenceProvider
      EclipseLink   org.eclipse.persistence.jpa.PersistenceProvider
      OpenJPA       org.apache.openjpa.persistence.PersistenceProviderImpl
      BatooJPA      org.batoo.jpa.persistence.PersistenceProviderImpl
     ============= =======================================================

* En caso de que no se detecten, se pueden registrar las clases del modelo
  cuyos objetos se quieren hacer persistentes.

* La *url*, el *driver* y dialecto específico dependen de cuál sea el |SGBD| que
  utilicemos. La enumeración de los más utilizados la tenemos en :ref:`una tabla
  de la unidad anterior <conn-drivers>`, pero necesitamos añadir a ella cómo se
  llaman los dialectos específicos de Hibernate_:

  .. table::
     :class: url-sql

     ============ =====================================================
      |SGBD|       Dialecto
     ============ =====================================================
      SQLite       org.hibernate.community.dialect.SQLiteDialect\ [#]_
      MariaDB      org.hibernate.dialect.MariaDBDialect
      MySQL        org.hibernate.dialect.MySQLDialect
      PostgreSQL   org.hibernate.dialect.PostgreSQLDialect
      Oracle       org.hibernate.dialect.OracleDialect
      SQL Server   org.hibernate.dialect.SQLServerDialect
     ============ =====================================================

* La propiedad ``hibernate.hbm2ddl.auto`` define cómo actuará la aplicación al
  comparar el esquema definido en las clases con el existente en la base de
  datos, y puede tener cuatro valores:

  .. table:: 
     :name: hdbm2ddl-auto

     +-------------+----------------------+---------------------------------------------------+
     | Valor       | Descripción          |                 Efecto                            |
     |             |                      +----------------------+----------------------------+
     |             |                      | Sin esquema previo   | Con esquema previo         |
     +=============+======================+======================+============================+
     | none        | No hace nada         | \-                   | \-                         |
     +-------------+----------------------+----------------------+----------------------------+
     | validate    | Comprueba el esquema | Error                | Error si no son iguales    |
     +-------------+----------------------+----------------------+----------------------------+
     | update      | Actualiza el esquema | Crea el esquema      | Actualiza y conserva datos |
     +-------------+----------------------+----------------------+----------------------------+
     | create      | Crea el esquema      | Crea el esquema      | Lo crea de nuevo           | 
     |             |                      |                      | (pérdida de datos)         |
     +-------------+----------------------+----------------------+----------------------------+
     | create-drop | Crea el esquema y lo | Como el anterior en ambos casos, pero se pierde   |
     |             | desecha al cerrar.   | todo al cerrar la sesión de Hibernate.            |
     +-------------+----------------------+---------------------------------------------------+

* Las tres últimas propiedades se refieren al registro y son útiles a efectos de
  depuración: se registran las sentencias |SQL| que genera el |ORM| (en el nivel
  *DEBUG*), tales sentencias se formatean para que resulten más legibles y,
  además, se acompañan de comentarios.

Ahora bien, ¿qué ocurre cuándo los datos de conexión o el tipo de base de datos
no están definidos de antemano, sino que se definen en **tiempo de ejecución**?
En ese caso, puede definirse un :java-util:`HashMap` que defina las valores de
propiedades y pasar el mapa cuando se usa la unidad de persistencia para crear
el objeto :jakarta-persistence:`EntityManagerFactory` (véase a continuación
:ref:`cómo conectar <orm-bas-conn>`). En ese caso, las definiciones del mapa
sobrescribirán a las que pudieran existir en el archivo.  Por ejemplo:

.. code-block:: java

   Map<String, String> props = new HashMap<>();
   props.put("jakarta.persistence.jdbc.url", "jdbc:sqlite:centro.db");
   props.put("hibernate.show_sql", "true");

   EntityManagerFactory emf = Persistence.createEntityManagerFactory("MiUnidadP", props);

.. rubric:: Notas al pie

.. [#] No es dialecto nativo de Hibernate, sino proporcionado por la comunidad.

.. |ORM| replace:: :abbr:`ORM (Object-Relational Mapping)`
.. |JDBC| replace:: :abbr:`JDBC (Java DataBase Connectivity)`
.. |XML| replace:: :abbr:`XML (eXtensible Markup Language)`
.. |SGBD| replace:: :abbr:`SGBD (Sistema Gestor de Bases de Datos)`
.. |SQL| replace:: :abbr:`SQL (Structured Query Language)`
.. |JPA| replace:: :abbr:`JPA (Java Persistence API)`
.. |URL| replace:: :abbr:`URL (Uniform Resource Locator)`

.. _Hibernate: https://www.hibernate.org
.. _hibernate-core: https://mvnrepository.com/artifact/org.hibernate/hibernate-core
.. _sqlite-jdbc: https://mvnrepository.com/artifact/org.xerial/sqlite-jdbc
.. _SQLite: https://sqlite.org
.. _slf4j-api: https://mvnrepository.com/artifact/org.slf4j/slf4j-api
.. _slf4j-simple: https://mvnrepository.com/artifact/org.slf4j/slf4j-simple
.. _jakarta.validation-api: https://mvnrepository.com/artifact/jakarta.validation/jakarta.validation-api
.. _hibernate-validator: https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator
.. _jakarta.persistence-api: https://mvnrepository.com/artifact/jakarta.persistence/jakarta.persistence-api
.. _hibernate-community-dialects: https://mvnrepository.com/artifact/org.hibernate.orm/hibernate-community-dialects
.. _jakarta.el-api: https://mvnrepository.com/artifact/jakarta.el/jakarta.el-api
