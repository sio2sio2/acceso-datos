.. _maven:

Maven
*****
:dfn:`Maven` es un gestor de proyectos escritos en Java, esto es, una
herramienta que automatiza la construcción y la gestión de aplicaciones escritas
en *Java*, lo cual implica simplificar las tareas de creación, gestión de
dependencias,  compilación, pruebas, empaquetado y despliegue de la aplicación.

Para ello provee de una orden (:command:`mvn`) provista de subórdenes que
modularizan las distintas tareas de las que se encarga.

.. note:: :ref:`vscode` tiene una extensión que nos abstrae de todos estos
   comandos, por lo que este apéndice no tiene más interés qué tener una idea de
   qué es lo que subyace por debajo.

Creación
========
Se impone una estructura estandarizada para el proyecto que podemos resumir en
el siguiente gráfico:

.. code-block:: none

   +-- src
   |    +-- main/
   |    |     +-- java/edu/acceso/miapp/  (Código de la aplicación)
   |    |     +-- resources/              Archivos de configuración, etc.
   |    |
   |    +-- test/                         Reproduce la estruct. de main para pruebas
   |
   +-- target/                            Código generado
   +-- pom.xml                            Configuración del proyecto.

El subcomando asociado a esta fase es ``archetype:generate``:

.. code-block:: console

   $ mvn archetype:generate -DgroupId=edu.acceso.test \
       -DartifactId=miapp
       -DarchetypeArtifactId=maven-archetype-quickstart \
       -Dversion=1.0.0 \
       -DinteractiveMode=false

Pero lo habitual es que el |IDE| nos abstraiga de esta fase y se encargue el
mismo de ejecutar la orden cuando le pidamos iniciar el proyecto.

Dependencias
============
También facilita el gestor la tarea de obtener las dependencias de nuestro
proyecto descargándolas directamente del `Repositorio General de Maven`_. Basta
incluirla en :file:`pom.xml`. Por ejemplo:

.. code-block:: xml

   <dependencies>
      <dependency>
          <groupId>jakarta.persistence</groupId>
          <artifactId>jakarta.persistence-api</artifactId>
          <version>3.2.0</version>
      </dependency>

      <!-- Otras dependencias -->
   </dependencies>

La página tiene un buscador y puede buscarse a través de él la librería. La del
ejemplo se haya en la dirección `persistence-api
<https://mvnrepository.com/artifact/jakarta.persistence/jakarta.persistence-api>`_,
y escogiendo la versión deseada, se obtiene el código exacto que debe añadirse
al archivo. Las librerías, además, pueden a su vez contener dependencias, pero
se calculan si necesidad de incluirlas explícitamente.

La suborden asociada a la obtención de dependencias es:

.. code-block:: console

   $ mvn dependency:resolve
   $ mvn dependency:tree         # Muestra el árbol de dependencias.

Sin embargo, no es necesario efectuar esta operación explícitamente, porque se
realiza automáticamente al realizar operaciones posteriores.

Compilación
===========
La compilación, esto es, la generación de *bytecode* se realiza a través del
plugin `maven-compiler-plugin`_. Hacer la operación, en principio, es sencillo:

.. code-block:: console

   $ mvn compile                  # Genera el bytecode.
   $ mvn clean compile            # Genera borrando antes el código generado previo

Ahora bien, hay distintas versiones de *Java* y, al respecto, el compilador
(:command:`javac`) necesita que se le indiquen dos cosas:

#. Para qué versión de *Java* se realiza la comprobación estática de código.
#. Para qué versión de *Java* se genera el *bytecode*\ [#]_.

En ausencia de configuración al respecto, el *plugin* le indica al compilador
que use para ambas cosas la antigua version 1.7\ [#]_, por lo que es muy
recomendable indicar explícitamente en el archivo :file:`pom.xml` una versión
algo más moderna, e indispensable si se van a usar características del lenguaje
más modernas. Puede hacerse como una propiedad:

.. code-block:: xml

   <properties>
      <maven.compiler.release>21</maven.compiler.release>
   </properties>

o directamente configurando explíciamente el *plugin* (que en principio no
necesita ser declarado):

.. code-block:: xml

   <build>
       <plugins>
           <plugin>
               <groupId>org.apache.maven.plugins</groupId>
               <artifactId>maven-compiler-plugin</artifactId>
               <version>3.14.0</version>
               <configuration>
                   <release>21</release>
               </configuration>
           </plugin>
       </plugins>
   </build>
   
.. hint:: Configurarlo como propiedad permite usar el valor declarado de la
   versión en otras partes del archivo, que necesiten indicar también la
   versión. Por ejemplo, al configurar el *plugin* para :ref:`generar la
   documentación con Javadoc <vscode-javadoc>`.

.. note:: La opción ``--release`` que engloba ambos aspectos de la compilación
   apareció en Java 9. Antes no existía y se usaban en su lugar ``--source`` y
   ``--target`` (que, no obstante, siguen existiendo), por lo que si se quiere
   mantener compatibilidad con un |JDK| antiguo podemos hacer:

   .. code-block:: xml

      <properties>
         <maven.compiler.source>21</maven.compiler.source>
         <maven.compiler.target>21</maven.compiler.target>
      </properties>

   o la configuración correspondiente directamente en el *plugin*.

Pruebas
=======
El código que prueba la aplicación debe escribirse bajo :file:`src/test/` con
la misma estructura que se uso en :file:`src/main/`.

Las subórdenes asociadas a esta fases son:

.. code-block:: console

   $ mvn test              # Compila todo el código (principal y pruebas) y ejecuta las pruebas
   $ mvn test-compile      # Sólo compila las pruebas sin llegar a ejecutarlas.

Empaquetado
===========
El software compilado suele distribuirse en formato |JAR|, un archivo zip que
contiene las clases compiladas (archivos :file:`.class`) y algunos otros
archivos adicionales. Para crearlo:

.. code-block:: console

   $ mvn clean package

Para la generación del paquete, :ref:`maven` usa el plugin `maven-jar-plugin`_,
que no incluye dependencias. Para más información sobre ello y cómo incluirlas
consulte este `gist sobre generación de paquetes
<https://gist.github.com/sio2sio2/efb81004024fd8329e2aef047f324c9c/>`_.

Arquetipos
==========
Al crear un nuevo proyecto, *Maven* define su estructura inicial tomando como
referencia lo que se llama un arquetipo (o ninguno). Como es probable que para
resolver las tareas del módulo partamos siempre de una misma base, nos ahorrará
mucho tiempo crear un arquetipo personal, así que pongámonos a ellos.

Lo primero es crear un arquetipo en un directorio:

.. code-block:: console

   $ mvn archetype:generate \
      -DgroupId=edu.acceso.arquetipo \
      -DartifactId=acceso_datos
      -DarchetypeArtifactId=maven-archetype-archetype \  # Arquetipo base
      -DarchetypeVersion=1.5 \         # Versión del arquetipo base
      -Dversion=1.0 \                  # Versión de este nuevo arquetipo.
      -DinteractiveMode=false

Esto definirá la estructura básica del arquetipo en el directorio
:file:`acceso_datos`:

.. code-block:: none

   +-- pom.xml   (pom.xml del propio arquetipo)
   |
   +-- src/
        +-- main/resources/
        |               +-- archetype-resources/
        |                                    +-- pom.xml  (pom.xml del proyecto)
        |                                    +-- src/ ...
        |               +-- META-INF/maven/
        |                               +-- archetype-metadata.xml
        +-- pom.xml
        +-- test/ ...

Como no nos interesan las pruebas podemos eliminar :file:`src/test/` y debemos
centrarmos en:

#. El :file:`pom.xml` del propio arquetipo.
#. El contenido de :file:`src/main/resources/archetype-resources/` que contiene
   los archivos que contendrá nuestro proyecto.
#. El archivo :file:`src/main/resources/META-INF/maven/archetype-metadata.xml`
   que contiene la configuración para generar el nuevo proyecto.

En consecuencia, todos los archivos que queramos que acaben en nuestro proyecto
deberán incluirse dentro de la segunda ubicación; y en el tercer archivo
deberemos definir la configuración:

.. literalinclude:: files/archetype-metadata.xml
   :language: xml
   :class: toggle
   :caption: archetype-metadata.xml

En la configuración tenemos dos partes fundamentales:

a. Por un lado declaramos los archivos que queremos que se incluyan en el
   proyecto. En la configuración hay tres bloques de archivos. La indicación
   *filtered* significa que queremos que el *plugin* analice el archivo en busca
   de propiedades para que las sustituya por su valor; y *packaged* que queremos
   que se añada la declaración de paquete: :code:`package
   edu.acceso.paquete...;` al comienzo del archivo.

#. Por otro, definimos cuáles son las propiedades y los valores por defecto que
   tienen. Por ejemplo, la variable *artifactId* podrá referirse en los archivos
   como :code:`${artifactId}` y, en ese caso, se sustituirá por el valor
   asignado.

.. warning:: Hay archivos como :file:`.gitignore` que el plugin no incluirá en
   el proyecto aunque lo creemos.

Pues bien, una vez creado el arquetipo deberíamos retocar su contenido para
ajustarlo a nuestras necesidades. 

.. note:: Se incluye :download:`un arquetipo preparado <files/arquetipo.zip>`
   que puede descargar, modificar a su gusto e instalar.

Una vez que tengamos preparado el arquetipo, debemos acceder a su directorio e
instalarlo:

.. code-block:: console

   $ cd acceso_datos/
   $ mvn clean install

.. tip:: Con ``clean`` nos aseguramos de que cualquier compilación anterior del
   arquetipo no interfiera.

Instalado, podemos comprobar que realmente lo está y registrarlo para que el
|IDE| nos permita seleccionarlo:

.. code-block:: console

   $ ls ~/.m2/repository/edu/acceso/arquetipo/acceso_datos/  # Si instalado, existirá.
   $ mvn archetype:crawl                                     # Lo registramos.
   $ cat ~/.m2/repository/archetype-catalog.xml              # Comprobamos el registro.

En caso de que quisiéramos eliminarlo podríamo eliminar a mano:

.. code-block:: console

   $ rm -rf ~/.m2/repository/edu/acceso/arquetipo/acceso_datos/
   $ mvn archetype:crawl

En principio, podríamos probar a generar un nuevo proyecto sin llegar a usar el
|IDE|:

.. code-block:: console

   $ mvn archetype:generate \
       -DarchetypeGroupId=edu.acceso.arquetipo \
       -DarchetypeArtifactId=acceso_datos \
       -DarchetypeVersion=1.0 \          # Versión de arquetipo (en su pom.xml)
       -DgroupId=edu.acceso.test_test \
       -DartifactId=test_test \
       -DinteractiveMode=false

.. caution:: Téngase presente que hay dos números de versión: la versión del
   propio arquetipo que es la que se indica aquí y que se define en el archivo
   :file:`pom.xml` del propio arquetipo (el que se encuentra en el directorio
   raíz, :file:`acceso_datos` en nuestro ejemplo) y la versión de la aplicación
   que pretendemos desarrollar, que se puede proporcionar mediante
   :code:`-Dversion=`, pero que no hemos fijado y hemos preferido indicar en el
   archivo `archetype-metadata.xml` a través de la propiedad correspondiente.

También podremos crear el proyecto a través del |IDE| siempre que nos hayamos
asegurado de que el arquetipo se registró.

.. rubric:: Notas al pie

.. [#] El *bytecode* es retrocompatible, es decir, el *bytecode* generado para
   una versión inferior de *Java* siempre podrá ejecutarse en una |JVM| de
   versión igual o superior. Lo contrario, sin embargo, no sucede.

.. [#] El compilador si no fuera por el *plugin* escogería la versión de la
   |JDK| que está utilizando el desarrollador.

.. |IDE| replace:: :abbr:`IDE (Integrated Development Environment)`
.. |JVM| replace:: :abbr:`JVM (Java Virtual Machine)`
.. |JDK| replace:: :abbr:`JDK (Java Development Kit)`
.. |JAR| replace:: :abbr:`JAR (Java ARchive)`
.. _Repositorio General de Maven: https://mvnrepository.com/
.. _maven-compiler-plugin: https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-compiler-plugin
.. _maven-jar-plugin: https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-jar-plugin
