final String protocol = "jdbc:sqlite:";

String dbUrl = String.format("%s%s", dbProtocol, ":memory:");  // Base de datos en la memoria

try (
   Connection conn = DriverManager.getConnection(url);
   Statement stmt = conn.createStatement();
) {

   // Particular de SQLite: respetar la integredad referencial (opcional).
   stmt.execute("PRAGMA foreign_keys = ON");

   // Tabla Departamento.
   stmt.executeUpdate("""
      CREATE TABLE "Departamento" (
         "idDepartamento"  INTEGER PRIMARY KEY /* GENERATED BY DEFAULT AS IDENTITY */,
         "denominacion"    VARCHAR(50)    NOT NULL
      );
   """);

   // Tabla Claustro.
   stmt.executeUpdate("""
      CREATE TABLE "Claustro" (
         "idClaustro"      INTEGER        PRIMARY KEY /* GENERATED BY DEFAULT AS IDENTITY */,
         "centro"          VARCHAR(100)   NOT NULL
      );
   """);

   // Tabla Profesor.
   stmt.executeUpdate("""
      CREATE TABLE "Profesor" (
         "idProfesor"      INTEGER        PRIMARY KEY /* GENERATED BY DEFAULT AS IDENTITY */,
         "apelativo"       VARCHAR(50)    NOT NULL,
         "nombre"          VARCHAR(75)    NOT NULL,
         "apellidos"       VARCHAR(150)   NOT NULL,
         "sustituye"       INTEGER        DEFAULT NULL,

         CONSTRAINT "fk_pro_pro" FOREIGN KEY("sustituye") REFERENCES "Profesor"("idProfesor")
            ON DELETE SET NULL
            ON UPDATE CASCADE
      );
   """);

   // Relación Profesor-Claustro.
   stmt.executaUpdate("""
      CREATE TABLE "Trabaja" (
         "profesor"        INTEGER,
         "claustro"        INTEGER,
         "departamento"    INTEGER,
         "casillero"       VARCHAR(30)    NOT NULL,
         
         CONSTRAINT "pk_tra"     PRIMARY KEY("profesor", "claustro"),
         CONSTRAINT "fk_tra_pro" FOREIGN KEY("profesor") REFERENCES "Profesor"("idProfesor")
            ON DELETE CASCADE
            ON UPDATE CASCADE,
         CONSTRAINT "fk_tra_cla" FOREIGN KEY("claustro") REFERENCES "Claustro"("idClaustro")
            ON DELETE CASCADE
            ON UPDATE CASCADE,
         CONSTRAINT "fk_est_dep" FOREIGN KEY("departamento") REFERENCES "Departamento"("idDepartamento")
            ON DELETE SET NULL
            ON UPDATE CASCADE
      );
   """);

   // Trigger para evitar que un sustituto pueda aparecer en Trabaja,
   // ya que su trabajo debe ser el del titular. ESTO NO ES ESTÁNDAR.

   stmt.executeUpdate("""
      CREATE TRIGGER "VerificaSustituto"
      BEFORE INSERT ON "Trabaja"
      FOR EACH ROW
      BEGIN
         SELECT CASE
            WHEN (SELECT "sustituye" FROM "Profesor" WHERE "idProfesor" = NEW."idProfesor") IS NOT NULL
               THEN RAISE(ABORT, 'Un sustituto no puede hacer trabajar de algo distinto al titular')
            END;
      END;
   """);

   // Más sentencias que ya veremos.
}
catch(SQLException err) {
   err.printStackTrace();
   System.exit(1);
}

