.. _orm-concurrencia:

Gestión de la concurrencia
**************************
|JPA| permite también controlar el acceso concurrente a la base de datos.
Nótese que, cuando hay dos o más accesos a la base de datos, uno de ellos puede
obtener datos y el otro, alterarlos después de aquel acceso. La consecuencia esa
que los datos obtenidos en esa primera sesión no serán exactamente iguales a los
que hay en la base de datos y eso puede dar lugar a situaciones de
inconsistencia. Para paliar estos problemas, hay dos estrategias de **bloqueo**.

.. _orm-bloq-opt:

Bloqueo optimista
=================
Este bloqueo se basa en el uso de un atributo anotado con ``@Version`` que
signifique la versión del objeto, de modo que cada vez que se cambian sus
valores, el |ORM| se encarga de aumentar su versión. No tenemos que
preocuparnos por dotarlo de valor, por lo que podemos establecer su *getter*
como ``protected``. Por ejemplo, si quisiéramos que ``Centro`` tuviera un
atributo de este tipo podríamos añadir a :ref:`su definición <orm-bas-map>` lo
siguiente:

.. code-block:: java

   @Version
   private int version;

   public int getVersion() {
      return version;
   }

   private void setVersion(int version) {
      this.version = version;
   }

Ante un atributo de este tipo, cada vez que hagamos una operación de
actualización o borrado, el |ORM| comprobará que el valor almacenado en la
base de datos para este campo coincide con el del objeto que pretendemos borrar
o actualizar, y, en caso contrario, lanza una excepción
:jakarta-persistence:`OptimisticLockException`.

Esta solución es ideal para situaciones en que las colisiones por concurrencia
no son frecuentes.

.. _orm-bloq-pes:

Bloqueo pesimista
=================
Este bloqueo es más adecuado cuando las colisiones son probables. Hay tres tipos
de bloqueo:

``PESSIMISTIC_READ``,
   que bloquea sólo las lecturas.

``PESSIMISTIC_WRITE``
   que bloquea tanto escrituras como lecturas.

``PESSIMISTIC_FORCE_INCREMENT``,
   que equivale al anterior, pero, además, aumenta la versión en caso de que la
   entidad sea versionada.

Para practicarlo sólo hay que obtener el objeto, indicando que queremos
bloquearlo:

.. code-block:: java
   :emphasize-lines: 5

   try(EntityManager em = emf.createEntityManager()) {
      EntityTransaction tx = em.getTransaction();
      try {
         tx.begin();
         Centro castillo = sesion.find(Centro.class, 11004866L, LockModeType.PESSIMISTIC_WRITE);
         // Acabamos de bloquear ese registro, así
         // que ninguna otra sesión concurrente podrá
         // leer o escribir este registro durante la transacción.

         // ...
         tx.commit();
      }
      catch(Exception e) {
         if(tx != null && tx.isActive()) tx.rollback();
         e.printStackTrace();
      }

      // Registro desbloqueado.
   }

El bloqueo sobre el registro dura hasta que se cierra la transacción en la que
se llevó a cabo.

Los bloqueos se pueden definir también sobre consultas y, en
ese caso, se aplicarán a todos los registros devueltos por la consulta:

.. code-block:: java 
   :emphasize-lines: 2

   // También podríamos haber usado Criteria API
   TypedQuery<Estudiante> query = session.createQuery("FROM Estudiante", Estudiante.class);
   query.setLockMode(LockModeType.PESSIMISTIC_WRITE);

   List<Estudiante> estudiantes = query.setResultList(); // Todos están bloquedos

.. note:: En caso de obtener columnas sueltas, no registros enteros, el bloqueo
   podría establecerse sólo por columnas si el |SGBD| lo soporta.

.. caution:: En *SQLite* los bloques se hacen para toda la base de datos, no se
   pueden bloquer registros individuales.

.. |SGBD| replace:: :abbr:`SGBD (Sistema Gestor de Bases de Datos)`
.. |ORM| replace:: :abbr:`ORM (Object-Relational Mapping)`
.. |JPA| replace:: :abbr:`JPA (Java Persistence API)`
