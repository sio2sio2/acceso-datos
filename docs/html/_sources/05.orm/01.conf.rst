.. _orm-conf:

Configuración
=============
El primer paso es saber cómo configurar nuestra aplicación para que haga uso
de Hibernate_. Para ello necesitamos utilizar las librerías:

a. hibernate-core_, que es el |ORM| en sí.
#. En caso de que el |ORM| no tenga soporte nativo para el dialecto del |SGBD|,
   una librería externa que lo proporcione.
#. Los controladores |JDBC| de la base de datos que queramos utilizar. Por
   ejemplo, sqlite-jdbc_, si deseamos usar SQLite_.
#. Adicionalmente, un sistema de log con slf4j-api_ y slf4j-simple_.

De este modo, las dependencias en Maven podrían quedar así:

.. code-block:: xml

   <dependencies>

        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>7.0.0.Beta3</version>
        </dependency>

        <!-- Dialecto proporcionado por la comunidad -->
        <dependency>
            <groupId>org.hibernate.orm</groupId>
            <artifactId>hibernate-community-dialects</artifactId>
            <version>7.0.0.Beta3</version>
        </dependency>

        <!-- Driver JDBC para SQLite -->
        <dependency>
            <groupId>org.xerial</groupId>
            <artifactId>sqlite-jdbc</artifactId>
            <version>3.48.0.0</version>
        </dependency>

        <!-- Logs (Opcional) -->

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <version>2.1.0-alpha1</version>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>2.1.0-alpha1</version>
        </dependency>

    </dependencies>

Además, debe crearse un archivo |XML| llamado :file:`hibernate.cfg.xml` que
indique cuál es la base de datos a la que se quiere conectar y algunos otros
parámetros de funcionamiento:

.. literalinclude:: files/hibernate.cfg.xml
   :language: xml

En un proyecto Maven deberemos guardar esta configuración en el directorio
:file:`resources/`. Sobre este archivo de configuración es recomendable hacer
algunos comentarios:

+ La *url*, el *driver* y dialecto específico dependen de cuál sea el |SGBD| que
  utilicemos. La enumeración de los más utilizados la tenemos en :ref:`una tabla
  de la unidad anterior <conn-drivers>`, pero necesitamos añadir a ella cómo se
  llaman los dialectos específicos de Hibernate_:

  .. table::
     :class: url-sql

     ============ =====================================================
      |SGBD|       Dialecto
     ============ =====================================================
      SQLite       org.hibernate.community.dialect.SQLiteDialect\ [#]_
      MariaDB      org.hibernate.dialect.MariaDBDialect
      MySQL        org.hibernate.dialect.MySQLDialect
      PostgreSQL   org.hibernate.dialect.PostgreSQLDialect
      Oracle       org.hibernate.dialect.OracleDialect
      SQL Server   org.hibernate.dialect.SQLServerDialect
     ============ =====================================================

+ La propiedad ``hibernate.hbm2ddl.auto`` define cómo actuará la aplicación al
  comparar el esquema definido en las clases con el existente en la base de
  datos, y puede tener cuatro valores:

  .. table:: 
     :name: hdbm2ddl-auto

     +-------------+----------------------+---------------------------------------------------+
     | Valor       | Descripción          |                 Efecto                            |
     |             |                      +----------------------+----------------------------+
     |             |                      | Sin esquema previo   | Con esquema previo         |
     +=============+======================+======================+============================+
     | validate    | Comprueba el esquema | Error                | Error si no son iguales    |
     +-------------+----------------------+----------------------+----------------------------+
     | update      | Actualiza el esquema | Crea el esquema      | Actualiza y conserva datos |
     +-------------+----------------------+----------------------+----------------------------+
     | create      | Crea el esquema      | Crea el esquema      | Lo crea de nuevo           | 
     |             |                      |                      | (pérdida de datos)         |
     +-------------+----------------------+----------------------+----------------------------+
     | create-drop | Crea el esquema y lo | Como el anterior en ambos casos, pero se pierde   |
     |             | desecha al cerrar.   | todo al cerrar la sesión de Hibernate.            |
     +-------------+----------------------+---------------------------------------------------+

+ Las tres últimas propiedades se refieren al registro y son útiles a efectos de
  depuración: se registran las sentencias |SQL| que genera el |ORM| (en el nivel
  *DEBUG*), tales sentencias se formatean para que resulten más legibles y,
  además, se acompañan de comentarios.

Con todo esto ya tendríamos preparado Hibernate para usarlo en nuestra
aplicación.

.. todo:: Configuración para múltiples bases de datos (dejar aquí comentario y
   desarrollar bajo un epígrafe posterior de configuración avanzada).

.. rubric:: Notas al pie

.. [#] No es dialecto nativo de Hibernate, sino proporcionado por la comunidad.

.. |ORM| replace:: :abbr:`ORM (Object-Relational Mapping)`
.. |JDBC| replace:: :abbr:`JDBC (Java DataBase Connectivity)`
.. |XML| replace:: :abbr:`XML (eXtensible Markup Language)`
.. |SGBD| replace:: :abbr:`SGBD (Sistema Gestor de Bases de Datos)`
.. |SQL| replace:: :abbr:`SQL (Structured Query Language)`

.. _Hibernate: https://www.hibernate.org
.. _hibernate-core: https://mvnrepository.com/artifact/org.hibernate/hibernate-core
.. _sqlite-jdbc: https://mvnrepository.com/artifact/org.xerial/sqlite-jdbc
.. _SQLite: https://sqlite.org
.. _slf4j-api: https://mvnrepository.com/artifact/org.slf4j/slf4j-api
.. _slf4j-simple: https://mvnrepository.com/artifact/org.slf4j/slf4j-simple
