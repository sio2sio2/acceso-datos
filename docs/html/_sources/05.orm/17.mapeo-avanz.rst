.. _orm-adv-mapping:

Mapeo avanzado
**************
Incluimos bajo este epígrafe otros aspectos más específicos que se reflejan al
anotar las clases.

Cascada de operaciones
======================
Cuando dos entidades se relaciones entre sí, los cambios en uno de los extremos
pueden afectar al otro.

.. rubric:: |SQL|

En |SQL|, al definir la relación con una clave foránea puede especificarse qué
ocurre con la entidad hijo\ [#]_ cuando la entidad padre se elimina (``ON
DELETE``) o cuando el identificador de la entidad padre se actualiza (``ON
UPDATE``)\ [#]_. Esto efectos son:

``CASCADE``
   aplicar también la operación a la entidad hijo, lo que se traduce en borrar
   la entidad hijo si la entidad padre se borró; o actualizar el valor de la
   clave foránea, si se actualizó el identificador del padre.

``SET NULL``
   poner a nulo la clave foránea.

``SET DEFAULT``
   poner un valor predeterminado (el que se especifique a continuación) como
   valor de la clave foránea.

``RESTRICT``
   impedir la operación.
   
|JPA|, tanto si la relación es unidireccional como bidireccional, permite
añadir la anotación ``@OnDelete`` en el lado propietario (el que tiene la clave
foránea) para notar el comportamiento ``ON DELETE``, aunque sólo se soporta el
efecto ``CASCADE``:

.. code-block:: java

   @ManyToOne
   @JoinColumn(name = "id_centro")
   @OnDelete(action = OnDeleteAction.CASCADE)
   private Centro centro;

De este modo, se añadirá en el esquema ``ON DELETE CASCADE`` y la base de datos
se encargará de propagar la operación en cascada.

.. caution:: En SQLite la integridad referencial está deshabilitada por defecto.

.. rubric:: Hibernate

.. caution:: Por lo general, las operaciones en cascada se definen de padre a
   hijo cuando las relaciones son bidireccionales. Cuando las relaciones son
   unidireccionales, las operaciones en cascada pueden definirse también y se
   aplican de hijo a padre, pero no suelen ser buena idea por provocar
   inconsistencias y, por lo general, es mejor evitarlas.

|JPA| permite desencadenar efectos adicionales en el nivel de aplicación
sobre las entidades *hijo* cuando se realiza una operación en la entidad
*padre*. Para aclararnos recordemos que para la relación bidireccional entre
``Centro`` (entidad padre) y ``Estudiante`` (entidad hijo) hemos definido lo
siguiente:

.. code-block:: java

   // Estudiante

   @ManyToOne
   @JoinColumn(name = "id_centro")
   private Centro centro

.. code-block:: java

   // Centro

   @OneToMany(mappedBy = "centro")
   private List<Estudiante> estudiantes;

Pueden definirse los siguientes *tipos de cascada*:

``CascadeType.PERSIST``
   Provoca que guardar la entidad *padre* provoque que se guarden también las
   entidades *hijo*. En nuestro ejemplo, guardar un objeto ``Centro`` implicará
   también que se guarden los nuevos objetos ``Estudiante`` que se hayan añadido
   a su lista de matriculados.

``CascadeType.MERGE``
   Provoca que la actualización de la entidad *padre* provoca una actualización
   de todas las entidades *hijo* con la que está relacionada. Entiéndase como si
   internamente se recorriera la lista de entidades hijo y se le aplicara a
   todas ellas el método ``.merge``.

``CascadeType.REMOVE``
   Provoca que la eliminación de la entidad *padre*, provoque la eliminación de
   todas las entidades *hijo*. Es, por tanto, el equivalente a ``ON DELETE
   CASCADE``, pero hecho en el nivel de aplicación y no desencadenado por la
   propia base de datos.

``CascadeType.REFRESH``
   Provoca que refrescar la entidad *padre*, refresque también todas las
   entidades *hijo*.

``CascadeType.DETACH``
   Propaga el desvinculamiento de la entidad *padre* a todas las entidades
   *hijo*.

``CascadeType.ALL``
   Equivale a haber configurado todas las anteriores.

A todas estos desencadenamientos debe añadirse la opción:

:code:`orphanRemoval = true`
   Provoca la eliminación de la entidad *hijo* en la base de datos al eliminarla
   de la lista en la entidad *padre*, es decir, desvincularla de ésta.

Estas anotaciones deben incluirse en el extremo de la entidad padre de las
relaciones bidireccionales:

.. code-block::

   @OneToMany(mappedBy = "centro", cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, orphanRemoval = true)
   private List<Estudiante> estudiantes;

Mapeo de colecciones
====================
La anotación ``@ElementCollection`` permite mapear colecciones de tipos básicos
(como ``String``, ``Integer`` o ``LocalDate``) sin que haya necesidad de  crear
una entidad aparte. Supongamos que quisiéramos añadir un listado de números de
teléfono a cada centro:

.. code-block:: java

   @ElementCollection
   @CollectionTable(name = "Telefono", joinColumns = @JoinColum(name = "id_estudiante"))
   @Column(name = "numero")
   private List<Integer> telefonos = new ArrayList<>();

Si no se permiten elementos repetidos, puedo optarse por un
:java-util:`HashSet` en vez de un :java-util:`ArrayList`.

.. rubric:: Notas al pie

.. [#] La entidad hijo es la entidad en que se sitúa la clave foránea y la
   entidad padre aquella a la que referencia dicha clave y en la que, por tanto,
   no se ha definido ningún campo extra para significar la relación. En nuestro
   ejemplo, ``Estudiante`` es la entidad hijo y ``Centro``, la entidad padre.

.. [#] Sólo el identificador de la entidad padre, porque la clave foránea en la
   entidad hijo sólo almacena el identificador. Si la entidad padre se actualiza
   cambiando cualquier otro campo, no hay ningún efecto que reflejar

.. |SQL| replace:: :abbr:`SQL (Structured Query Language)`
.. |ORM| replace:: :abbr:`ORM (Object-Relational Mapping)`
.. |JPA| replace:: :abbr:`JPA (Java Persistence API)`
