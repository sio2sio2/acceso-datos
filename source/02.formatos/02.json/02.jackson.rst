.. _json-jackson:

Jackson
*******
Otra librería muy utilizada y que tiene la ventaja de que también soporta
:ref:`XML <xml>` es la proporcionada por el `proyecto Jackson
<https://github.com/FasterXML/jackson>`_.

Como :ref:`GSON <json-gson>`, nos permite hacer una conversión automática entre
el modelo de objetos y |JSON| para lo cual podemos definir las clases para
`Tutor`, `Alumno` y `Grupo` exactamente de :ref:`la misma forma <gson-auto>`.
Como en aquel caso empezaremos por no complicar las cosas: las secuencias son
arrays y los valores son directamente traducibles a un tipo primitivo de |JSON|
(es decir, representaremos la edad y no la fecha de nacimiento).

Para empezar necesitaremos la librería `jackson-databind
<https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind>`_.

.. _json-jackson-read:

Lectura
=======

El código es muy similar al practicado con `GSON`:

.. code-block:: java
   :emphasize-lines: 2, 8

   Path ruta = Path.of(System.getProperty("user.home"), "grupos.json");
   ObjectMapper mapper = new ObjectMapper();

   try  (
       InputStream st = Files.newInputStream(ruta);
       InputStreamReader sr = new InputStreamReader(st);
   ) {
       Grupo[] grupos = mapper.readValue(sr, Grupo[].class);
       Arrays.stream(grupos).forEach(System.out::println);
   }
   catch(IOException err) {
       err.printStackTrace();
   }

Si, en cambio, quisiéramos generar una lista de grupos y no un array:

.. code-block:: java

   TypeReference GrupoLista =  new TypeReference<ArrayList<Grupo>>(){};
   ArrayList<Grupo> grupos = mapper.readValue(sr, GrupoLista);

.. note:: Que los miembros de cada grupo sean un array o una lista es
   absolutamente indiferente: la traducción se hará de igual forma.

.. _json-jackson-write:

Escritura
=========
Por su parte la escritura a un |JSON| desde un modelo de objetos tampoco tiene
excesivas diferencias respecto a lo que encontraríamos en `GSON`:

.. code-block:: java

   public static void main(String[] args) {
       Path ruta = Path.of(System.getProperty("java.io.tmpdir"), "grupos.json");
       ObjectMapper mapper = new ObjectMapper();
       // mapper.enable(SerializationFeature.INDENT_OUTPUT);  // Salida "bonita"

       Grupo[] grupos = {
           new Grupo(
               (short) 1,
               "ESO",
               'B',
               new Tutor("Pepe M.J.", "Matemáticas"),
               new Alumno[] {new Alumno("Pablito", 12), new Alumno("Juanito", 13)}
           ),
           new Grupo(
               (short) 2,
               "ESO",
               'C',
               new Tutor("Pedro J.M.", "Lengua"),
               new Alumno[] {new Alumno("Lola", 13), new Alumno("Manolito", 13)}
           )
       };

       try (
           OutputStream st = Files.newOutputStream(ruta);
           OutputStreamWriter sw = new OutputStreamWriter(st);
       ) {
           mapper.writeValue(sw, grupos);
       }
       catch (IOException err) {
           err.printStackTrace();
       }
   }

Al escribir, es indiferente si usamos arrays o listas.

.. note:: Existe el método ``writeValueAsString`` que devuelve una cadena con el
   |JSON| resultante:

   .. code-block:: java

      String contenido = mapper.writeValueAsString(grupos);

.. _json-jackson-no-primitivos:

Tipos no primitivos
===================
En el ejemplo anterior todos lo tipos de los objetos de Java tiene
correspondencia con un tipo primitivo de |JSON|, ya que las cadenas son cadenas,
los números, números, y los arrays o ``ArrayList`` los traduce directamente
Jackson como secuencias. Incluso si usamos los valores de una enumeración para
codificarla en el |JSON|\ [#]_, la librería será capaz de traducir sin
isntrucciones por nuestra parte.

Pero supongamos ahora que no es así y que de los alumnos se registra la fecha de
nacimiento:

.. literalinclude:: files/grupos-nacimiento.json
   :class: toggle
   :emphasize-lines: 13,17,32,36

y, por supuesto, se modifica la clase ``Alumno`` para que contenga un atributo
`nacimiento`  de tipo `Date`  (véase :ref:`la versión incluida en las
explicaciones sobre GSON <json-alumno-nacimiento>`).

En este caso, habrá que definir un traductor específico para este campo: de
`Date` a una cadena de la forma *yyyy-MM-dd* y viceversa. Para el caso
particular de fechas hay dos atajos:

* Especificar el formato de fechas en el objeto mapeador:

  .. code-block:: java

     mapper.setDateFormat(new SimpleDateFormat("yyyy-MM-dd"));

* Usar la anotación `@JsonFormat
  <https://www.javadoc.io/doc/com.fasterxml.jackson.core/jackson-annotations/latest/com/fasterxml/jackson/annotation/JsonFormat.html>`_
  que da soporte a fechas:

  .. code-block:: java

     @JsonFormat(shape=JsonFormat.Shape.STRING, pattern="yyyy-MM-dd")
     private Date nacimiento

  .. note:: En este segundo caso necesitamos el paquete aparte
     `jackson-annotations
     <https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations>`_.

  .. warning:: Al usar esta anotación puede haber desajustes al serializar las fechas
     como consecuencia de la zona horaria, por lo que habría que especificarla
     en la propia anotación:

     .. code-block:: java

        @JsonFormat(shape=JsonFormat.Shape.STRING, pattern="yyyy-MM-dd", timezone="Europe/Madrid")
        private Date nacimiento

     o al definir el objeto de mapeo:

     .. code-block:: java

        mapper.setTimeZone(TimeZone.getDefault());

  .. caution:: En las anotaciones deben usarse literales y constantes, por lo
     que no puede usarse el método para obtener el huso horario del sistema.

.. todo:: Comprobar que debe incorporarse:

   .. code-block:: java

      mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);

Sin embargo, ensayaremos una solución más general que ilustre cómo definir
nuestro propio traductor\ [#]_ (para la cual se necesita añadir la librería
`jackson-core
<https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core>`_):

.. code-block:: java

   public class Traductor {
       
       public static SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");

       public static class DateSerializer extends JsonSerializer<Date> {

           @Override
           public void serialize(Date value, JsonGenerator gen, SerializerProvider sp) 
               throws IOException, JsonProcessingException {
                   if(value == null) gen.writeNull();
                   else gen.writeString(df.format(value));
           }
       }

       public static class DateDeserializer extends JsonDeserializer<Date> {

           @Override
           public Date deserialize(JsonParser parser, DeserializationContext context)
               throws IOException, JsonProcessingException {
                   try {
                      return df.parse(parser.getText());
                   }
                   catch(ParseException err) {
                      throw new RuntimeException(err);
                   }
           } 
       }
   }

Y ya sólo quedaría indicar el campo en que se va a usar este traductor:

.. code-block:: java

   @JsonSerialize(using=Traductor.DateSerializer.class)
   @JsonDeserialize(using=Traductor.DateDeserializer.class)
   private Date nacimiento;

Y en caso de que hubiera varios atributos `Date` en las clases implicadas y
todas se quieran traducir igual, podríamos ahorrarnos la anotación individual en
cada uno de los atributos y hacer lo siguiente:

.. code-block:: java

   ObjectMapper mapper = new ObjectMapper();
   SimpleModule module = new SimpleModule();

   module.addSerializer(java.util.Date.class, new Traductor.DateSerializer());
   module.addDeserializer(java.util.Date.class, new Traductor.DateDeserializer());
   mapper.registerModule(module);

.. rubric:: Notas al pie

.. [#] Es decir, que si se tiene:

       .. code-block:: java

          public enum Enumeracion {
            UNO,
            DOS;
          }

       se usan las cadenas *UNO* y *DOS* en el |JSON|. En caso, contrario,
       habría que hacer un traductor como se expone bajoo este epígrafe.

.. [#] ``SimpleDateFormat`` no es *thread-safe* por lo que habría que mejorar
   algo el código en caso de utilizarse hilos. Por ejemplo:

   .. code-block:: java

      private static final ThreadLocal<SimpleDateFormat> df = 
         ThreadLocal.<SimpleDateFormat>withInitial(() -> new SimpleDateFormat("yyyy-MM-dd"));

   y ``df.parse`` y ``df.format`` se transforman en ``df.get().parse`` y
   ``df.get().format``.

.. |JSON| replace:: :abbr:`JSON (JavaScript Object Notation)`


