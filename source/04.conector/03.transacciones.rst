.. _conn-transactions:

Transacciones
=============
Hasta ahora hemos obviado el concepto de transacción. Una :dfn:`transacción` es
una operación sobre la base datos, no necesariamente atómica, que debe
completarse o no hacerse en absoluto, es decir, si una *transacción* se
compone de dos operaciones (sentencias |SQL|), ambas operaciones deben
realizarse.

Por ejemplo, en una tienda la venta de un bolígrafo implica dos cosas:

+ Ingresar el importe del bolígrafo.
+ Eliminar el bolígrafo del almacén.

Ambas operaciones son indisolubles y hemos de hacerlas para que se complete la
venta, o no hacerlas en absoluto para que quede la venta pendiente. En cambio,
si se hiciera una y no la otra, la base de datos quedaría en un estado
inconsistente.

Manejo de transacciones
-----------------------
En los ejemplos con que hemos ilustrado los distintos casos, cada sentencia
|SQL| constituye una transacción diferente. Si queremos que varias sentencias
pertenezcan a una misma transacción debemos hacer lo siguiente:

.. code-block:: java
   :emphasize-lines: 1, 10, 14, 17

   conn.setAutoCommit(false);  // Evitamos que cada sentencia implique una transacción

   try(
      PreparedStatement pstmt = conn.prepareStatement("INSERT INTO Departamento (denominacion) VALUES (?)")
   ) {
       for(String denominacion: new String[] {"Informática", "Inglés", "Tecnología"}) {
           pstmt.setString(1, denominacion);
           pstmt.executeUpdate();
       }
       conn.commit(); // Después de ejecutar todas las sentencias, las confirmamos.
   }
   catch(SQLException err) {
      err.printStackTrace();
      conn.rollback();  // Hubo un problema, no ejecutamos ninguna inserción.
   }
   finally {
      conn.setAutoCommit(true);
   }

.. borrar esto)

.. important:: En el ejemplo, las sentencias son una misma sentencia con
   distinto parámetros.  Evidentemente, las transacciones pueden estar
   constituidas por cualesquiera sentencias.

.. seealso:: Más adelante se propone un mecanismo para gestionar
   :ref:`transacciones con un bloque try-with-resources <conn-transaction-manager>`.

.. _conn-batch:

Operaciones masivas
-------------------
En el caso de que tengamos que llevar a cabos muchas operaciones que comparten
la misma sentencia y distintos parámetros (como en el ejemplo anterior
precisamente), el modo más eficiente para llevarlas a cabo es el siguiente:

.. code-block:: java
   :emphasize-lines: 8, 11

   conn.setAutoCommit(false);  // Todas las inserciones forman parte de una transacción

   try(
      PreparedStatement pstmt = conn.prepareStatement("INSERT INTO Departamento (denominacion) VALUES (?)")
   ) {
       for(String denominacion: new String[] {"Informática", "Inglés", "Tecnología"}) {
           pstmt.setString(1, denominacion);
           pstmt.addBatch();  // Añadimos la inserción al procedimiento.
       }

       pstmt.executeBatch(); // Ejecutamos todas las inserciones pendientes.
       conn.commit(); // Grabamos la transacción.
   }
   catch(SQLException err) {
      err.printStackTrace();
      conn.rollback();  // Hubo un problema, no ejecutamos ninguna inserción.
   }
   finally {
      conn.setAutoCommit(true);
   }

.. |SQL| replace:: :abbr:`SQL (Structured Query Language)`

