final String protocol = "jdbc:sqlite:";

String dbUrl = String.format("%s%s", dbProtocol, ":memory:");  // Base de datos en la memoria

try (
   Connection conn = DriverManager.getConnection(url);
   Statement stmt = conn.createStatement();
) {

   // Integridad referencial.
   stmt.execute("PRAGMA foreign_keys = ON");

   // Tabla Departamento.
   stmt.executeUpdate("""
      CREATE TABLE "Departamento" (
         "idDepartamento"  INTEGER PRIMARY KEY,
         "nombre"          VARCHAR(50)    NOT NULL
      );
   """);

   // Tabla Profesor.
   stmt.executeUpdate("""
      CREATE TABLE "Profesor" (
         "idProfesor"      INTEGER        PRIMARY KEY /* GENERATED BY DEFAULT AS IDENTITY */,
         "apelativo"       VARCHAR(50)    NOT NULL,
         "nombre"          VARCHAR(75)    NOT NULL,
         "apellidos"       VARCHAR(150)   NOT NULL
      );
   """);

   // Tabla Claustro.
   stmt.executeUpdate("""
      CREATE TABLE "Claustro" (
         "idClaustro"      INTEGER        PRIMARY KEY,
         "centro"          VARCHAR(100)   NOT NULL,
      );
   """);

   // Relación Profesor-Claustro.
   stmt.executaUpdate("""
      CREATE TABLE "Trabaja" (
         "profesor"        INTEGER,
         "claustro"        INTEGER,
         "departamento"    INTEGER,
         CONSTRAINT "pk_tra"     PRIMARY KEY("idProfesor", "idClaustro"),
         CONSTRAINT "fk_tra_pro" FOREIGN KEY("profesor") REFERENCES "Profesor"("idProfesor")
            ON DELETE CASCADE
            ON UPDATE CASCADE,
         CONSTRAINT "fk_tra_cla" FOREIGN KEY("claustro") REFERENCES "Claustro"("idClaustro")
            ON DELETE CASCADE
            ON UPDATE CASCADE,
         CONSTRAINT "fk_est_dep" FOREIGN KEY("departamento") REFERENCES "Departamento"("idDepartamento")
            ON DELETE NULL
            ON UPDATE CASCADE
      );
   """);

   // Más sentencias que ya veremos.
}
catch(SQLException err) {
   err.printStackTrace();
   System.exit(1);
}

