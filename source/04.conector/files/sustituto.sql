PRAGMA foreign_keys = ON;  -- Propio de SQLite

-- Descoméntese GENERATED, etc. si no se usa SQLite.
CREATE TABLE Departamento (
   id_departamento  INTEGER PRIMARY KEY /* GENERATED BY DEFAULT AS IDENTITY */,
   denominacion    VARCHAR(50)    NOT NULL
);

CREATE TABLE Centro (
   id_centro        INTEGER        PRIMARY KEY /* GENERATED BY DEFAULT AS IDENTITY */,
   nombre          VARCHAR(100)   NOT NULL
);

CREATE TABLE Profesor (
   id_profesor      INTEGER        PRIMARY KEY /* GENERATED BY DEFAULT AS IDENTITY */,
   apelativo       VARCHAR(50)    NOT NULL,
   nombre          VARCHAR(75)    NOT NULL,
   apellidos       VARCHAR(150)   NOT NULL,
   sustituto       INTEGER        UNIQUE DEFAULT NULL,

   CONSTRAINT fk_pro_pro FOREIGN KEY(sustituto) REFERENCES Profesor(id_profesor)
      ON DELETE SET NULL
      ON UPDATE CASCADE
);

CREATE TABLE Trabaja (
   profesor        INTEGER,
   centro          INTEGER,
   departamento    INTEGER,
   -- Para permitir que un mismo profesor tenga varios casilleros.
   casillero       INTEGER ARRAY    NOT NULL,
   
   CONSTRAINT pk_tra     PRIMARY KEY(profesor, centro),
   CONSTRAINT fk_tra_pro FOREIGN KEY(profesor) REFERENCES Profesor(id_profesor)
      ON DELETE CASCADE
      ON UPDATE CASCADE,
   CONSTRAINT fk_tra_cla FOREIGN KEY(centro) REFERENCES Centro(id_centro)
      ON DELETE CASCADE
      ON UPDATE CASCADE,
   CONSTRAINT fk_est_dep FOREIGN KEY(departamento) REFERENCES Departamento(id_departamento)
      ON DELETE SET NULL
      ON UPDATE CASCADE
);


-- Los sustitutos no puede aparecer en la tabla Trabaja
CREATE TRIGGER NoSustitutoEnTrabaja
BEFORE INSERT ON Trabaja
FOR EACH ROW
WHEN (SELECT sustituto FROM Profesor WHERE sustituto = NEW.profesor) IS NOT NULL
BEGIN
   SELECT RAISE(FAIL, 'Imposible registrar un sustituto en Trabaja: hace la misma labor que el sustituido.');
END;


INSERT INTO Departamento (denominacion) VALUES
	('Lengua Española y Literatura'),
	('Inglés'),
	('Francés'),
	('Física y Química'),
	('Geografía e Historia'),
	('Tecnología'),
	('Clásicas');

INSERT INTO Centro VALUES
   (11004866, 'IES Castillo de Luna'),
   (11701164, 'IES Astaroth'),
   (11007533, 'IES Arroyo Hondo');

INSERT INTO Profesor (apelativo, nombre, apellidos) VALUES
   ('Manolo', 'Manuel', 'Ibañez Verano'),
   ('Juan', 'Juna Alberto', 'Cossío Álvarez'),
   ('Loli', 'Dolores', 'Japón Peinado'),
   ('Merche', 'Mercedes', 'Páez Beltrán'),
   ('Santi', 'Santiago', 'Menéndez Campany'),
   ('Inma', 'María Inmaculada', 'Díaz Mateos'),
   ('Valentín', 'Valentín', 'Téllez Mellado');
   
-- Sustituciones.
UPDATE Profesor SET sustituto = 3 WHERE id_profesor = 1; -- Loli sustituye a Manolo.
UPDATE Profesor SET sustituto = 5 WHERE id_profesor = 4; -- Santi sustituye a Merche.
UPDATE Profesor SET sustituto = 6 WHERE id_profesor = 5; -- Inma sustituye a Santi.
UPDATE Profesor SET sustituto = 7 WHERE id_profesor = 6; -- Valentín sustituye a Inma.

-- Asignación de profesores a centros.
INSERT INTO Trabaja VALUES
   (1, 11004866, 1, 13),
   (2, 11004866, 2, 3),
   (1, 11701164, 1, 25),
   (4, 11007533, 5, 67);

.mode column

SELECT id_profesor,apelativo,sustituto FROM Profesor;

CREATE VIEW PlantillaFuncionamiento AS
   WITH Sustituto AS (
      SELECT id_profesor, sustituto
         FROM Profesor
         WHERE sustituto IS NOT NULL
      UNION ALL
      SELECT S.id_profesor, P.sustituto
         FROM Profesor P
                  INNER JOIN
              Sustituto S ON P.id_profesor = S.sustituto
         WHERE P.sustituto is NOT NULL
   )
   -- Los sustitutos activos junto al titular original
   SELECT S1.sustituto AS sustituto,
          S1.id_profesor AS titular,
         CASE WHEN (S2.id_profesor IS NULL) THEN 1 ELSE 0 END AS activo
      FROM Sustituto S1
             LEFT JOIN
           Sustituto S2 ON S1.sustituto = S2.id_profesor
             LEFT JOIN
           Sustituto S3 ON S1.id_profesor = S3.sustituto
      WHERE S3.sustituto IS NULL
   UNION
   -- Los titulares a quienes no sustituye nadie
   SELECT P1.id_profesor AS sustituto,
          P1.id_profesor AS titular,
         CASE WHEN (P1.sustituto IS NULL) THEN 1 ELSE 0 END AS activo
      FROM Profesor P1
             LEFT JOIN
           Profesor P2 ON P1.id_profesor = P2.sustituto
      WHERE P2.id_profesor IS NULL;


SELECT * FROM PlantillaFuncionamiento;

-- Listado de profesores activos con centros en los que trabajas.
SELECT P.apelativo AS profe,
       T.centro AS centro,
       D.denominacion AS departamento,
       T.casillero AS casillero
   FROM Trabaja T
         INNER JOIN
        PlantillaFuncionamiento F ON F.titular = T.profesor
         INNER JOIN
        Departamento D ON T.departamento = D.id_departamento
         INNER JOIN
        Profesor P ON P.id_profesor = F.sustituto
   WHERE F.activo = 1
   ORDER BY P.id_profesor;
