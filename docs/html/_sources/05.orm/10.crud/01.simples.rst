.. _orm-simple-crud:

Simples
*******
Antes de comenzar a desglosar las cuatro operacioness |CRUD| básicas, es
necesario introducir otro concepto, el de :dfn:`vinculación a la sesión`: un
objeto puede sincronizarse con la base de datos cuando se encuentra vinculado a
la sesión activa, lo cual ocurre cuando:

a. Lo hemos obtenido previamente de la base de datos en esa misma sesión.
#. Hemos usando con él un método que supone su vinculación:

   * `.persist`, que agrega un nuevo objeto a la base de datos y, por su propia
     naturaleza se usa con un objeto creado *ex novo* y, por tanto, no vinculado.
   * `.merge`, que expresamente vincula un objeto a la base de datos, existiera
     en ella (pudimos obtenerlo en una sesión ya cerrada) o no (es un objeto *ex
     novo*).

.. note:: Hemos preferido acatar la terminología emanada del acrónimo |CRUD|,
   por lo que incluimos cada uno de los términos en los epígrafes. Tenga
   presente, pues, que *CREATE* hace referencia a \"crear\" datos en la base de
   datos, esto es, añadir o insertar datos; y no con crear el esquema (```CREATE
   TABLE``, etc). De hecho, no hemos de preocuparnos por el esquema, ya que éste
   es capaz de generarse sólo a partir de las clases anotadas.



.. _orm-crud-create:

CREATE
======
Para agregar objetos (o sea, registros) a la base de datos, Hibernate_ utiliza
el método ``.persist``:

.. code-block:: java
   :emphasize-lines: 14

   // Supongamos que el objeto ya se instanció antes y se creó.
   HibernateFactory hf = HibernateFactory.getInstance();
   Transaction tr = null;

   try(Session sesion = hf.openSession()) {
      try {
         tr = sesion.beginTransaction();
         // Supongamos que nuestra base de datos no tiene direcciones de centro
         Centro castillo = new Centro(
            11004866,
            "IES Castillo de Luna",
            Centro.Titularidad.PUBLICA
         );
         sesion.persist(castillo); // Vincula y agrega.
         // Guardamos los cambios y cerramos la sesión.
         tr.commit();
      }
      catch(Exception err) {
         if(tr != null) tr.rollback;
      }
   }

.. note:: Una vez vinculado, podríamos en esta misma sesión realizar otras
   operaciones que exigen que el objeto esté vinculado (como :ref:`actualizar
   <orm-crud-update>` o :ref:`eliminar <orm-crud-delete>`).

.. _orm-crud-read:

READ
====
La operación de lectura más sencilla es obtener un objeto a partir de su
identificador, para lo cual se usa el método ``.find``:

.. code-block:: java
   :emphasize-lines: 3

   try(Session sesion = hf.openSession()) {
      // No es necesaria transacción, puesto que no se escribe.
      Centro castillo = sesion.find(Centro.class, 11004866L);
      System.out.println(castillo == null?"El centro no existe":castillo);
   }
   catch(HibernateException err) {
      e.printStackTrace();
   }

.. seealso:: La obtención de todos los objetos requiere el :ref:`uso de HLQ
   <orm-hql-select-all>` o :ref:`Criteria API <orm-criteria-select-all>`.

También podemos considerar una operación de lectura la que se hace a través del
método ``.refresh`` que consiste en volver a tomar un objeto de la base de
datos, desechando todos los cambios que haya podido sufrir en memoria:

.. code-block:: java
   :emphasize-lines: 8

   try(Session sesion = hf.openSession()) {
      Transaction tr = null;
      try {
         Centro castillo = sesion.find(Centro.class, 11004866L);
         // Hacemos cambios en el objeto
         castillo.setNombre("Pongo otro");
         castillo.setTitularidad(Centro.Titularidad.PRIVADA);
         sesion.refresh(castillo); // Se vuelve a la versión de la BD
         tr.commit(); // En realidad no cambia nada.
      }      
      catch(Exception e) {
         if(tr != null) tr.rollback();
      }
   }
   catch(HibernateException err) {
      e.printStackTrace();
   }


.. _orm-crud-update:

UPDATE
======
Para actualizar objetos **vinculados** a la sesión se usan sus *setters*:

.. code-block:: java
   :emphasize-lines: 6

   try(Session sesion = hf.openSession()) {
      Transaction tr = null 
      try {
         tr = sesion.beginTransaction();
         Centro castillo = sesion.find(Centro.class, 11004866L);  // Objeto vinculado.
         castillo.setNombre("I.E.S. Castillo de Luna");
         tr.commit(); // Guardamos cambios.
      }
      catch(RuntimeException err) {
         if(tr != null) tr.rollback();
         e.printStackTrace();
      }
   }

En cambio, si el objeto no está vinculado, aún podremos hacer las
actualizaciones con los *setters*, si lo vinculamos con ``.merge``.

.. code-block:: java
   :emphasize-lines: 11, 12

   Centro castillo = null;
   try(Session sesion = hf.openSession()) {
      Centro castillo = sesion.find(Centro.class, 11004866L);
   }

   try(Session sesion = hf.openSession()) {
      Transaction tr = null 
      try {
         tr = sesion.beginTransaction();
         // castillo no está ligado a esta sesión.
         castillo.setNombre("I.E.S. Castillo de Luna");
         sesion.merge(castillo);  // Vincula el objeto a la sesión.
         tr.commit(); // Guardamos cambios.
      }
      catch(RuntimeException err) {
         if(tr != null) tr.rollback();
         e.printStackTrace();
      }
   }

En caso de que no exista ningún objeto en la base de datos con el identificador
del objeto que se usa como argumento, éste se agregará (tiene el mismo efecto
que ``.persist``).

.. note:: En esta operación es irrelevante hacer cambios y luego vincular que
   vincular y luego hacer cambios: los cambios se reflejarán en la base de datos
   al confirmarlos.

.. warning:: Evite cambiar el identificador del objeto.

.. _orm-crud-delete:

DELETE
======
Para borrar un objeto **vinculado** a la sesión debe usarse el método
``.remove``:

.. code-block:: java
   :emphasize-lines: 6

   try(Session sesion = hf.openSession()) {
      Transaction tr = null 
      try {
         tr = sesion.beginTransaction();
         Centro castillo = sesion.find(Centro.class, 11004866L);  // Objeto vinculado
         castillo.remove(castillo);
         tr.commit(); // Guardamos cambios.
      }
      catch(RuntimeException err) {
         if(tr != null) tr.rollback();
         e.printStackTrace();
      }
   }

.. tip:: Si el objeto no está vinculado, podremos vincularlo usando **previamente**
   ``.merge``.

.. |CRUD| replace:: :abbr:`CRUD (Create, Read, Update, Delete)`
.. _Hibernate: https://www.hibernate.org

