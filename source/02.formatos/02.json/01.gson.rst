.. _json-gson:

GSON
****
La `librería GSON <https://github.com/google/gson>`_ es desarrollada
por *Google* y nos permite dos estrategias para leer y escribir |JSON|:

* Procesar el archivo y realizar la conversión manualmente a clases de Java.
* Realizar la conversión a clases automáticamente.

.. note:: Podemos descargar la librería de su `página en mvnrepository.com
   <https://mvnrepository.com/artifact/com.google.code.gson/gson>`_.

.. _gson-auto:

Conversión automática
=====================
Para ello necesitamos que las clases con las que vamos a convertir los objetos
codificados en |JSON| sigan el estándar `JavaBean
<https://es.wikipedia.org/wiki/JavaBean>`_.

Es obvio que en el ejemplo anterior tenemos tres objetos (`Grupo`, `Alumno` y
`Tutor`) así que definámoslos, de modo que sus atributos se ajusten a lo que
recoge el |JSON|:

.. literalinclude:: files/Tutor.java
   :class: toggle
   :caption: Tutor.java

.. literalinclude:: files/Alumno.java
   :class: toggle
   :caption: Alumno.java

.. literalinclude:: files/Grupo.java
   :class: toggle
   :caption: Grupo.java

No nos hemos roto mucho la cabeza: estas tres clases recogen las propiedades que
se observan en el |JSON| y cumplen los requisitos para ser un *JavaBean*:

.. rst-class:: simple

* Disponen de un constructor sin argumentos.
* Es serializable.
* Sus atributos son privados.
* Dispone de *getters* y *setters* con la convención de nombres apropiada.

Lectura
-------
La lectura es sumamente sencilla  y se basa en crear un objeto `GSON
<https://javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/Gson.html>`_:

.. code-block:: java
   :emphasize-lines: 2,8

   Path ruta = Path.of(System.getProperty("user.home"), "grupos.json");
   Gson gson = new Gson();

   try (
      InputStream st = Files.newInputStream(ruta);
      InputStreamReader sr = new InputStreamReader(st);
   ) {
      Grupo[] grupos = gson.fromJson(sr, Grupo[].class);
      for(Grupo g: grupos) {
         System.out.println(g);
      }
   }
   catch(IOException err) {
      err.printStackTrace();
   }

Obsérvese que, dado que el archivo es una secuencia de objetos `Grupo` al usar
el método ``fromJson``, indicamos que la traducción se haga como
:code:`Grupo[].class`. Si quisiéramos que `grupos` fuera una lista y no un
array, entonces tendríamos que complicar un poco el código:

.. code-block:: java

   Type GrupoLista = new TypeToken<ArrayList<Grupo>>() {}.getType();
   ArrayList<Grupo> grupos = gson.fromJson(sr, GrupoLista);

.. note:: En cambio, no tenemos que preocuparnos por el atributo
   `Grupo.miembros`: si en vez de haberlo definido como un array lo hubiéramos
   definido como un ``ArrayList``, todo nuestro código sería válido.

Escritura
---------
La escritura también es bastante sencilla:

.. code-block:: java
   :emphasize-lines: 2,25

   Path ruta = Path.of(System.getProperty("user.home"), "grupos.json");
   Gson gson = new Gson();

   Grupo[] grupo = {
       new Grupo(
           (short) 1,
           "ESO",
           'B',
           new Tutor("Pepe M.J.", "Matemáticas"),
           new Alumno[] {new Alumno("Pablito", 12), new Alumno("Juanito", 13)}
       ),
       new Grupo(
           (short) 2,
           "ESO",
           'C',
           new Tutor("Pedro J.M.", "Lengua"),
           new Alumno[] {new Alumno("Lola", 13), new Alumno("Manolito", 13)}
       )
   };

   try (
       OutputStream st = Files.newOutputStream(ruta);
       OutputStreamWriter sw = new OutputStreamWriter(st);
   ) {
       gson.toJson(grupo, sw);            
   }
   catch(IOException err) {
       err.printStackTrace();
   }

En este caso, se escribe el archivo `grupos.json` con todos los campos
apelotonados. Si queremos alterar este modo predeterminado podemos construir un
objeto ``Gson`` utilizando `GsonBuilder
<https://javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/GsonBuilder.html>`_:

.. code-block:: java

   Gson gson = new GsonBuilder()
         .setPrettyPrinting()
         .setDateFormat(DateFormat.SHORT, DateFormat.DEFAULT) // Definimos cómo queremos almacenar fecha y hora.
         .create()

.. note:: Hemos aprovechado para indicar cómo traducir los objetos de tiempo a
   una cadena en el archivo |JSON|. Para conocer más sobre estos formatos
   eche un vistazo al `tutorial sobre DateFormat
   <https://docs.oracle.com/javase/tutorial/i18n/format/dateFormat.html>`_.
   También podríamos optar por definir más explicatamente el formato según lo
   expuesto para :java-text:`SimpleDateFormat <SimpleDateFormat>`:

   .. code-block:: java

      Gson gson = new GsonBuilder()
            .setPrettyPrinting()
            .setDateFormat("yyyy-MM-dd") // Por ejemplo, 2024-09-03
            .create()

También puede generarse una cadena en vez de escribir directamente en un
archivo:

.. code-block:: java

   String contenido = gson.toJson(grupo);

Y usar posteriormente esta cadena para lo que nos interese (p.e. :ref:`guardarla en un
archivo <iotext-w>`).

Tipos no primitivos
-------------------
En el ejemplo anterior, los valores de todos los campos eran tipos primitivos de
|JSON| y, en consecuencia, su traducción al modelo de objetos de Java no
revestía problemas. Supongamos, sin embargo, el mismo ejemplo, pero con una
pequeña diferencia: de los alumnos no se expresa la edad, sino su fecha de
nacimiento:

.. literalinclude:: files/grupos-nacimiento.json
   :class: toggle
   :emphasize-lines: 13,17,32,36

Como el estándar |JSON| no tiene definido un campo específico para las fechas,
las hemos expresados, simplemente, con una cadena con un formato apropiado y de
este modo aparecen en el archivo.

.. note:: La librería ya proporciona una solución predefinida para el caso
   particular del tipo `Date` y que se citó un poco más arriba:

   .. code-block:: java
      :emphasize-lines: 3

      Gson gson = new GsonBuilder()
            .setPrettyPrinting()
            .setDateFormat("yyyy-MM-dd") // Por ejemplo, 2024-09-03
            .create()

   Con crear así el objeto ``GSON`` y que el atributo ``Alumno.nacimiento`` sea
   de tipo `Date` ya se estará definiendo cómo es la tradución entre el objeto y
   el campo |JSON| (una cadena de la forma indicada). Pero esta traducción sólo
   es posible para fechas, y no para otro tipo de objetos para los cuales
   necesitaremos definir nosotros la traducción. Como queremos ilustrar cómo se
   hace esta traducción, prescindimos de la ayuda de ``setDateFormat``.

Para lograr la traducción entre una cadena con formato `yyyy-MM-dd` y el tipo
`Date` necesitamos definir así al alumno:

.. _json-alumno-nacimiento:

.. literalinclude:: files/Alumno-adapter.java
   :caption: Alumno.java
   :class: toggle
   :emphasize-lines: 4,5,8,13,14,16,20,37-39,41-43

¿Qué hemos hecho? Básicamente:

* La trivialidad de cambiar todo lo pertinente para que el campo entero `edad`
  pase a ser `nacimiento` de tipo `Date`
* Hemos, no obstante, añadido un segundo *setter* a `nacimiento` para permitir
  que se pueda definir usando una cadena en vez de un objeto `Date`. Esto, en
  realidad, no tiene nada que ver con la traducción y se hace para poder definir
  manualmente en la aplicación alumnos de esta forma:

  .. code-block:: java

     Alumno lola = new Alumno("Lola", "2011-08-11");

* Declaramos que para el campo `nacimiento` usaremos un adaptador:

  .. code-block:: java

     @JsonAdapter(YyyyMMddDateTypeAdapter.class)
     private Date nacimiento;

Y ahora hay que definir esa clase que define cómo es la traducción. Lo más
limpio, por si se quiere soportar fácilmente diferentes formatos para la fecha
es crear una clase abstracta:

.. literalinclude:: files/AbstractDateTypeAdapter.java
   :class: toggle
   :caption: AbstractDateTypeAdapter.java

Y una clase que concretamente define cuál es el formato de fecha:

.. literalinclude:: files/YyyyMMddDateTypeAdapter.java
   :class: toggle
   :caption: YyyyyMMddDateTypeAdapter.java
   
La parte molar de la traducción está en la clase abstracta:

* El método ``out`` es el que se encarga de tomar el atributo del objeto y
  convertirlo en el valor |JSON|: por eso uno de sus argumentos un tipo
  `Date`.

* El método ``in`` es el que hace la traducción inversa: de la cadena |JSON| se
  obtiene el atributo de tipo `Date`

Conversión manual
=================

.. todo:: Tómese como referencia inicial `GSON en Java con ejemplos
   <https://jarroba.com/gson-json-java-ejemplos/>`_..

.. Enlaces:
   https://stackoverflow.com/questions/4308554/simplest-way-to-read-json-from-a-url-in-java

   https://www.javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/package-summary.html
   
   https://mkyong.com/java/how-do-convert-java-object-to-from-json-format-gson-api/


.. |JSON| replace:: :abbr:`JSON (JavaScript Object Notation)`

