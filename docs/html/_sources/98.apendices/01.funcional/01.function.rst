Interfaces funcionales
**********************
*Java* no es un lenguaje de programación en que las funciones sean `ciudadanas
de primera clase <https://thatcsharpguy.github.io/tv/first-class-citizens/>`_,
lo cual es indispensable para que un lenguaje pueda ser funcional. Para
sortear esta deficiencia (o característica, según se quiera ver), Java introdujo
las **interfaces funcionales** y las **expresiones lambda**.

La idea que subyace es la de crear un objeto que represente la función que
querríamos tratar como ciudadana de primera clase. Como en *Java* los objetos sí
lo son, entonces no tendremos problemas para asignarles un nombre o pasarlos como
argumento de un método.

Implementación
==============
Para ilustrarla supongamos que queremos implementar una partida con varios
jugadores cada uno de los cuales puede obtener distintos puntos. Como no
queremos complicar el código supongamos que la mecánica de jugar consiste,
simplemente, en indicarle a la partida cuántos puntos ha sacado cada uno:

.. code-block:: java

   public class Partida {
       
       private String[] jugador;
       private int[] puntuacion;

       Partida(String[] nombres) {
           jugador = nombres;
           puntuacion = new int[nombres.length];
           this.condicion = condicion;
       }

       /**
       * Juega una ronda que consiste, simplemente, en  sumar los puntos
       * que se proporcionan. Ni siquiera hacemos control de errores
       *
       * @param puntos - Los puntos que ha obtenido cada jugador en esa ronda.
       *
       * @return false si los puntos eran inválidos y no se pudieron sumar.
       */
       public boolean jugar(int[] puntos) {
           if(puntos.length != puntuacion.length) return false;
           for(int i=0; i<puntos.length; i++) puntuacion[i] += puntos[i];
           return true;
       }

       // Faltan los getters, pero no queremos perder más el tiempo.
   }

Supongamos ahora que queremos comprobar qué jugador ha ganado. Es sencillo, pero
el problema es que dependiendo de cuál sea el juego el criterio para escoger
el ganador es distinto. En algunos juegos gana el que tiene más puntos, mientras
que en otro el que tiene menos. Incluso el criterio podría ser mucho más
extravagante. Consecuentemente decidimos definir fuera esta implementación
el algoritmo para calcular el ganador\ [#]_ y pasárselo al constructor al crear
la partida. Para ello debemos definir la interfaz funcional adecuada:

.. literalinclude:: files/Victoria.java

que vemos que tiene un método que recibe las puntuaciones y devuelve cuál de
ellas es la ganadora. ``@FunctionalInterface`` es opcional: simplemente se
encarga de comprobar que la interfaz no tiene más de un método. Reescribamos
ahora la partida:

.. literalinclude:: files/Partida.java
   :emphasize-lines: 6,8,12,22

Como vemos, al crear la partida proporcionamos la condición que servirá para
decidir el ganador y en el método ``vencedor`` la utilizamos ejecutando su
método ``comprobar``.

Queda por último ilustrar cómo usarlo:

.. literalinclude:: files/App.java
   :emphasize-lines: 4-17

Simplemente hemos implementado de forma anónima la interfaz definiendo cómo es
el método ``comprobar``. En este caso, hemos escogido la puntuación mayor de
todas  y para simplificar el ejemplo no nos hemos preocupado de los empates que
podrían producirse.

Este estrategia no es la más corta, pero ilustra más claramente cuál es la
estrategia de *Java* para solventar el problema de que en Java no existan
funciones que sean ciudadanas de primera clase.

Una alternativa es definir un método estático y usarlo directamente, ya que
*Java* sobreentenderá que este método es el método ``comprobar`` de la interfaz:

.. literalinclude:: files/App-sm.java
   :emphasize-lines: 4, 7, 13-24

La tercera y última alternativa es usar **expresiones lambda**:

.. literalinclude:: files/App-lambda.java
   :emphasize-lines: 4-15,18

en donde podemos observar que:

* No es necesario indicar el tipo del argumento ``num`` porque ya se conoce
  gracias a la definición de la interfaz.
* No es necesario indicar la lista de argumentos entre paréntesis, porque sólo
  hay uno. En caso contraría si deberían haberse escritos (:code:`(arg1, arg2)`).
* El cuerpo de la función se escribe entre llaves, como se hace habitualmente.
* Como la implementación de la función es algo larga, no ganamos en claridad y,
  de hecho, queda algo más limpia la segunda alternativa.

Respecto a esto último, imaginemos, sin embargo, que nuestro criterio es que el
ganador es siempre el último con independencia de las puntuaciones que saquen.
Entonces la implementación del criterio se puede hacer en una sola línea y queda
así:

.. literalinclude:: files/App-lambda-sl.java
   :emphasize-lines: 5

en donde:

.. rst-class:: simple

* Ni siquiera hemos definido (aunque podríamos haberlo hecho) una variable aparte:

  .. code-block:: java

     Victoria ganaElUltimo = puntos -> puntos.length - 1;

  para hacer más compacto el código.

* Cuando la implementación es en una sola línea, puede prescindirse de las
  llaves y la sentencia ``return``.

Interfaces predefinidas
=======================
Aunque podemos definir interfaces funcionales arbitrarias, tal como hemos
ilustrado arriba, Java dispone de algunas interfaces funcionales genéricas ya
definidas que podemos usar:

:java-function:`Function<T, R> <Function>`
   Permte la definición de funciones que toman un argumento de entrada (el
   genérico ``T``) y devuelven un valor (el genético ``R``). Para la ejecución
   se requiere aplicar ``appply``. Justamente nuestra interfaz funcional era de
   este tipo así que podríamos haber usado la predefinida en vez de definir una
   nosotros. La única dificultad es que es una interfaz genérica:

   .. literalinclude:: files/App-Func.java
      :emphasize-lines: 2, 6

   La implementación de la partida queda así:

   .. literalinclude:: files/Partida-Func.java
      :emphasize-lines: 2, 8, 10, 24

:java-function:`UnaryOperator<T> <UnaryOperator>`
   Como el anterior, pero tanto el argumento como el valor devuelto deben ser
   del tipo ``T``.

:java-function:`BiFunction<T, U, R> <BiFunction>`
   La única diferencia con el primero es que toma dos argumentos como entrada
   (los genéricos ``T`` y ``U``).

:java-function:`BinaryOperator<T> <BinaryOperator>`
   Como el anterior, pero los tres tipos deben iguales (el genérico ``T``).

:java-function:`Predicate<T> <Predicate>`
   Toma un argumento de entrada (el genérico ``T``) y devuelve un valor
   booleano. Para aplicarla debe ejecutarse el método ``test`` (no ``apply``).

:java-function:`BiPredicate<T, U> <BiPredicate>`
   Como el anterior, pero toma dos argumento de entrada.

:java-function:`Consumer<T> <Consumer>`
   Toma un argumento de entrada (el genérico ``T``) y no devuelve ningún valor.
   Para aplicarla debe ejecutarse el método ``accept``.

:java-function:`BiConsumer<T, U> <BiConsumer>`
   Toma dos argumentos de entrada (los genéricos ``T`` y ``U``) y no devuelve
   ningún valor.

:java-function:`Supplier<T> <Supplier>`
   No toma ningún argumento de entrada y devuelve un valor de tipo ``T``. Para
   aplicarla debe ejecutarse el método ``get``.

.. seealso:: Para profundizar en todas estas interfaces puede echarle un ojo al
   artículo `Function Interface in Java with examples
   <https://www.geeksforgeeks.org/function-interface-in-java-with-examples/>`_
.. 
.. rubric:: Notas al pie

.. [#] Al lector más avispado no se le habrá pasado posiblemente que podríamos
   haber definido Partida como una clase abstracta con un método abstracto
   llamador ``vencedor`` y en cada una de las subclases implementásemos este
   método en particular. Podríamos hacerlo, pero entonces no podríamos ilustrar
   lo que pretendemos.
