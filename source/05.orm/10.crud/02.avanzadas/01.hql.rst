.. _orm-hql:

|HQL|
=====
Es un lenguaje de consulta prácticamente idéntico a |SQL| que sustituye tablas y
campos por objetos y atributos. Además abstrae de las particularidades de los
|SGBD|.

Consulta básica
---------------
Para obtener todos los elementos de un relación basta hacer:

.. code-block:: java
   :name: orm-hql-select-all

   // "sesion" el objeto Session abierto.
   List<Estudiante> estudiantes = session.createQuery(
      "FROM Estudiante"
   ).getResultList();

donde la palabra *Estudiante* en la cadena no es el nombre de la tabla,
sino el nombre de la clase ``Estudiante`` que, en este caso, coinciden.
Recordemos que el lenguaje hace referencia a objetos y atributos.

.. note:: La cadena también podría haber sido ":code:`SELECT e FROM
   Estudiante e`"

Podemos también obtener campos individuales en vez de objetos ``Estudiante``:

.. code-block:: java

   List<String> nombres = session.createQuery(
      "SELECT e.nombre FROM Estudiante e",
      String.class
   ).getResultList();

o un conjunto de campos individuales:

.. code-block:: java

   List<Object[]> campos = session.createQuery(
      "SELECT e.nombre, e.nacimiento FROM Estudiante e"
   ).getResultList();

   for(Object[] fila: campos) {
      String nombre = (String) fila[0];
      LocalDate nacimiento = (LocalDate) fila[1];
      // ...
   }

.. note:: En los tres casos puede incluirse la clase de la lista
   (``Estudiante.class``, ``String.class`` y ``Object[].class``
   respectivamente). Obsérvese también que los campos mencionados son
   atributos de estudiantes, no nombres de columnas.

.. tip:: Cuando se obtiene varias columnas, en vez de obtener un
   ``Object[].class`` se puede pedir la obtención de  ``Tuple``, que hace más
   amable la obtención posterior de los campos individules:

   .. code-block:: java

      List<Tuple> campos = session.createQuery(
         "SELECT e.nombre, e.nacimiento FROM Estudiante e",
         Tuple.class
      ).getResultList();

      for(Tuple tupla: campos) {
         String nombre = tupla.get(0, String.class);
         LocalDate nacimiento = tupla.get(1, LocalDate.class);
         // ...
      }


Condiciones
-----------
Como en el caso de |SQL|, |HQL| permite aplicar condiciones usando la
sintaxis de ``WHERE``:

.. code-block:: java

   // Incluir valores dentro de la cadena no es recomendable
   List<Estudiante> estudiantes = sesion.createQuery(
      "FROM Estudiante e WHERE nombre LIKE 'J%'"
   ).getResultList();

Ahora bien, en este caso, es mejor parametrizar la consulta en vez de incluir
directamente los valores dentro de la cadena:

.. code-block:: java

   List<Estudiante> estudiantes = sesion.createQuery(
      "FROM Estudiante e WHERE nombre LIKE :patron"
   ).setParamenter("patron", "J%")
   .getResultList();

La principal limitación es que podemos usar los operadores básicos que
existen en |SQL| (como el ``LIKE`` del ejemplo), pero no las funciones que
los |SGBD| tienen definidas y que, habitualmente, son exclusivas y no forman
parte del estándar. Por ejemplo, supongamos que queremos obtener los alumnos
con menos de 20 años. Hay tres posibilidades:

* Que hubiéramos definido un campo calculado ``edad`` en ``Estudiante``. El
  problema de esta solución es que para que pueda usarse en la expresión debe
  ser un atributo persistente y almacenarse en la base de datos.

* Utilizar :ref:`SQL nativo <orm-sql-nativo>`, que tiene el inconveniente de
  que depende del |SGBD|.

* Buscarnos las vueltas para reducir la evaluación lógica a operadores
  sencillos. Por ejemplo, en este caso, podemos calcular en Java, qué fecha
  era hace 20 años para poder comparar directamente con el campo nacimiento.

  .. code-block:: java

     LocalDate fecRef = LocalDate.now().minusYears(20);
     List<Estudiante> estudiantes = sesion.createQuery(
       "FROM Estudiante e WHERE e.edad > :limite"
     ).setParamenter("limite", fecRef)
     .getResultList();

Lo que sí podemos usar son los campos definidos por la relación entre dos
tablas, aunque no tengan reflejo en la base de datos. Por ejemplo:

.. code-block:: java

   // Estudiantes que pertenecen a un determinado centro
   List<List<Estudiante>> estudiantes = sesion.createQuery(
      "SELECT c.estudiantes FROM Centro c WHERE c.id = :idCentro",
      List.class
   ).setParameter("idCentro", 11004866L)
   .getResultList();

.. TODO:: 

   SELECT e FROM Centro c JOIN c.estudiantes e WHERE c.id = :idCentro

Ordenación
----------
|HQL| dispone de la cláusula ``ORDER BY`` para ordenar los resultados:

.. code-block:: java

   List<Estudiante> estudiantes = sesion.createQuery(
      "FROM Estudiante e ORDER BY e.nombre DESC"
   ).getResultList();

Agrupación
----------
También puede usarse ``GROUP BY`` y funciones agregadas:

.. code-block:: java

   List<Object[]> res = sesion.createQuery(
      "SELECT e.centro.nombre, COUNT(e) FROM Estudiante e GROUP BY e.centro.nombre"
   ).getResultList();

.. note:: No es posible agrupar por ``e.centro``.

Joins
-----
|HQL| también permite hacer *joins*, la diferencia fundamental respecto a su
equivalente de |SQL| es que no se usan las entidades sino las referencias entre
ellas:

.. code-block:: java

   List<Estudiante> res = sesion.createQuery(
      "FROM Estudiante e JOIN e.centro c WHERE c.nombre = :nombreCentro"
   ).setParameter("nombreCentro", "IES Castillo de Luna")
   .getResultList();

Hibernate_ soporta tres *joins* distintos:

``INNER JOIN``
   que es el que se ha escrito más arriba simplemente con ``JOIN``, aunque se
   puede escribir ``INNER JOIN`` si se desea. En este caso, los estudiantes sin
   centro asignado no se obtendrán.

``LEFT JOIN``
   Como en el caso de |SQL|, se obtendrán también los estudiantes no
   matriculados en ningún centro (o sea, no relacionados con ningún centro:

   .. code-block:: java

      List<Estudiante> res = sesion.createQuery(
         "FROM Estudiante e LEFT JOIN e.centro c WHERE c.nombre = :nombreCentro"
      ).setParameter("nombreCentro", "IES Castillo de Luna")
      .getResultList();

``FETCH JOIN``
   Es una variante de ``INNER JOIN`` que obtiene los mismos resultados, pero
   aprovecha la consulta para cargar también los centros. En general, Hibernate_
   pratica uan carga perezosa de las referencias. Por ejemplo, si obtenemos un
   estudiante, su centro matriculado no se obtendrá hasta que el usuario no
   use el *getter* correspondiente. Este *join* sí aprovecha la consulta en que
   están involucradas las entidades *Estudiante* y *Centro* para obtener también
   el centro:

   .. code-block:: java

      List<Estudiante> res = sesion.createQuery(
         "FROM Estudiante e FETCH JOIN e.centro c WHERE c.nombre = :nombreCentro"
      ).setParameter("nombreCentro", "IES Castillo de Luna")
      .getResultList();

Actualización y borrado
-----------------------
Aunque menos habitual, |HQL| también permite hacer operaciones de
actualización y borrado:

.. code-block:: java

   // Desvincula de cualquier centro a las personas
   // cuyo nombre empieza por "J".
   int filasAfectadas = session.createQuery(
      "UPDATE Estudiante SET centro = null WHERE nombre LIKE :patron"
   ).setParameter("patron", "J%")
   .executeUpdate();

   // Borra a todas las personas que se llaman Juan
   int filasEliminadas = session.createQuery(
      "DELETE FROM Estudiante WHERE nombre = :nombre"
   ).setParameter("nombre", "Juan")
   .executeUpdate();

.. |SGBD| replace:: :abbr:`SGBD (Sistema Gestor de Bases de Datos)`
.. |CRUD| replace:: :abbr:`CRUD (Create, Replace, Update, Delete)`
.. |HQL| replace:: :abbr:`HQL (Hybernate Query Language)`
.. |SQL| replace:: :abbr:`SQL (Structured Query Language)`
.. _Hibernate: https://www.hibernate.org
